What is a Thread?
• A Thread is an independent unit of execution within a program that has
  its own program counter and stack
• When you run a Java program, it is executed by the default Thread
• Programs that rely on one thread of execution are called SingleThreaded programs
• Programs that are able to run some or all of their instructions in a
  concurrent manner are called Multi-Threaded programs
• Writing multi-threaded involves solving a whole new set of problems
  e.g. resource synchronization, preventing deadlocks and race
  conditions etc.

JAVA.LANG.THREAD
• java.lang.Thread has a dual purpose:
• It has methods that provide ways to interact with the current
  Thread of execution. For example, Thread.sleep(long) is a
  static method that suspends the current thread for the duration in
  milliseconds provided in its argument for
• It provides its subclasses the ability to execute concurrently as
  independent threads as well as interact with other concurrently
  executing threads

THREADS WITHIN JAVA
• java.lang.Thread is a class that represents a single thread in a
  Java program, allowing multiple threads to run concurrently within a
  single process.
• To start a new thread, create an instance of the Thread class and call
  its start() method, which in turn calls the run() method.
• A thread goes through various states in its lifecycle, such as NEW,
  RUNNABLE, BLOCKED, WAITING, TIMED_WAITING, and TERMINATED

CREATING A NEW THREAD
  public class MyThread implements Runnable {

      @Override
      public void run() {
      // code to be executed in this thread
      }

      public static void main(String[] args) {
      // create an instance of MyThread and start it
      MyThread myThread = new Thread(MyThread());
      myThread.start();
      }
  }

CREATING A NEW THREAD
    public class MyThread extends Thread {

        @Override
        public void run() {
        // code to be executed in this thread
        }
        public static void main(String[] args) {
        // create an instance of MyThread and start it
        MyThread myThread = new MyThread();
        myThread.start();
        }
    }

If a given piece of code is run by two threads at once:
• The order of which thread gets to run first is unpredictable.
• How many statements of one thread run before the other thread
  runs some of its own statements is unpredictable.